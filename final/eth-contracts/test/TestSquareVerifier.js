// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require("Verifier");

contract('TestSquareVerifier', async(accounts) => {
  before(async function () { 
    this.verifier = await SquareVerifier.new(accounts);         
  });

  describe('match square verifier spec', function () {
    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('should return true for correct proof', async function () { 
      let SampleProof = 
      {
        "proof": {
          "a": [
            "0x09f461edaf17851d52e7f52f871c5e62c47d8e4f6876088612e480e6f3763701",
            "0x0a4511d868b094be873ea339482bf17bdd3b80d704944101372cfa71a24fdfb9"
          ],
          "b": [
            [
              "0x18b754e9665ee861740aa1ccb4def4ed4eb945d0f26be1dced2656004ea59111",
              "0x099a674ea974d7421b96a617635ac38939775ce47916487edaf5d384ddd401bf"
            ],
            [
              "0x22450d6b21830786c87e94131fbaaf9f6eaa93e6d526a827b42b706bee7654ff",
              "0x022b35cca41f73cee44819184e9c0054e1553f3a31310e53581d90e526c93073"
            ]
          ],
          "c": [
            "0x1b4280395bd40fda07d22d768d033219e982e9e26844fd4fc8b7a0af278119fc",
            "0x1dfdd81ca4b3545fdb5a0c6ff7bfaa3c1ca1a3107b62e608b8ef8bfc68943370"
          ]
        },
        "inputs": [
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "raw": "09f461edaf17851d52e7f52f871c5e62c47d8e4f6876088612e480e6f376370198b754e9665ee861740aa1ccb4def4ed4eb945d0f26be1dced2656004ea59111099a674ea974d7421b96a617635ac38939775ce47916487edaf5d384ddd401bf9b4280395bd40fda07d22d768d033219e982e9e26844fd4fc8b7a0af278119fc"
      };

        var result = await this.verifier.verifyTx(SampleProof.proof.a, SampleProof.proof.b, SampleProof.proof.c, SampleProof.inputs);
        assert.equal(result, true, "Failed to verify a true proof");
    }) 
        
    // Test verification with incorrect proof
    it('should return false for incorrect proof', async function () { 
      let FalseSample = 
      {
        "proof": {
          "a": [
            "0x2a55fb39b129d8bd94522666f7099d942a9acb17526a5abdd7625ade2b98d29a",
            "0x1ad391b06f255539d1baa533083a865b962e0127f687bb298050a4e551776174"
          ],
          "b": [
            [
              "0x0cbe770fe838b41cfa3883150626854958441611b821c9e108d3dda284769e5f",
              "0x1acbc5b78e386f8183a33e7b2c9fc54fb1a632f0192c94d730dd884ea8994640"
            ],
            [
              "0x0d02162313799bb54ffcb4141ffd18a6c85971a88b55717e845d4e78fdd4e59a",
              "0x2be0a65a8c62936f23ac2496732d0154008e65e7b5f13900e617a5010fba20cc"
            ]
          ],
          "c": [
            "0x2bd45b77001aa0a1b291cf40d8930255e537b13b0c6550ecb8c0711e7a780f0f",
            "0x208fb2b08907e45c727fd4f7550e5ffc57fc5b3028e0381e3d1777b8d1acc2e1"
          ]
        },
        "inputs": [
          "0x0000000000000000000000000000000000000000000000000000000000000056"
        ],
        "raw": "aa55fb39b129d8bd94522666f7099d942a9acb17526a5abdd7625ade2b98d29a0cbe770fe838b41cfa3883150626854958441611b821c9e108d3dda284769e5f1acbc5b78e386f8183a33e7b2c9fc54fb1a632f0192c94d730dd884ea8994640abd45b77001aa0a1b291cf40d8930255e537b13b0c6550ecb8c0711e7a780f0f"
      };
      var result = await this.verifier.verifyTx.call(FalseSample.proof.a, FalseSample.proof.b, FalseSample.proof.c, FalseSample.inputs);
      assert.equal(result, false, "Failed to reject a false proof");
    }) 
  }) 
})
